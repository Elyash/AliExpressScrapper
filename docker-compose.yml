services:
  mongo:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    depends_on:
      - mongo
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongo
    ports:
      - "8081:8081"

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # RabbitMQ default port
      - "15672:15672"  # RabbitMQ management interface
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 10s

  aliexpressscrapper:
    build:
      context: .
      dockerfile: AliExpressScrapper/Dockerfile
    container_name: aliexpressscrapper
    depends_on:
      - mongo
      - rabbitmq
    ports:
      - "7777:7777" # Just to be in the same network
    volumes:
      - .:/app/MyFullstackProject
    environment:
      - PYTHONPATH=$${PYTHONPATH}:.
      - PYTHONDONTWRITEBYTECODE=1
    command: python -m AliExpressScrapper.scrapper

  flaskwebapp:
    build:
      context: .
      dockerfile: WebApp/Dockerfile
    container_name: flaskwebapp
    depends_on:
      - mongo
      - aliexpressscrapper
      - rabbitmq
    ports:
      - "5000:5000" # Flask port
    volumes:
      - .:/app/MyFullstackProject
    environment:
      - PYTHONDONTWRITEBYTECODE=1
    command: python WebApp/app.py

volumes:
  mongo-data:
